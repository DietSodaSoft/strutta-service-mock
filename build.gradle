buildscript {
    ext {
        springBootVersion = '1.2.5.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") 
        classpath("io.spring.gradle:dependency-management-plugin:0.5.2.RELEASE")

        classpath "net.saliman:gradle-cobertura-plugin:2.2.8"

    }
}

apply plugin: 'java'
apply plugin: 'eclipse-wtp'
apply plugin: 'idea'
apply plugin: 'spring-boot' 
apply plugin: 'io.spring.dependency-management' 
apply plugin: 'war'

apply plugin: 'cobertura'

war {
    baseName = 'schultzco-webservices'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

configurations {
    providedRuntime
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-aop")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-starter-jdbc")
//    compile("org.springframework.boot:spring-boot-starter-security")
    compile("org.springframework.boot:spring-boot-starter-social-facebook")
    compile("org.springframework.boot:spring-boot-starter-social-linkedin")
    compile("org.springframework.boot:spring-boot-starter-social-twitter")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    compile("org.thymeleaf.extras:thymeleaf-extras-springsecurity4:2.1.2.RELEASE")
    compile("org.apache.commons:commons-lang3")
    compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310")
    compile("org.springframework.webflow:org.springframework.js:2.0.2.RELEASE")
    runtime("mysql:mysql-connector-java")
    providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")
    testCompile("org.springframework.boot:spring-boot-starter-test")

    // swagger
    compile("io.springfox:springfox-swagger2:2.2.2")
    compile("io.springfox:springfox-swagger-ui:2.2.2")



    compile("org.pac4j:spring-security-pac4j:1.3.0")
    compile("org.pac4j:pac4j-oauth:1.7.1")

    // guava
    compile("com.google.guava:guava:18.0")

    // apache commons
    compile("org.apache.commons:commons-lang3:3.4")

    // datasource for integration tests
    runtime("com.h2database:h2")

    // data mapping for dates/times/etc
    runtime "org.jadira.usertype:usertype.extended:3.2.0.GA"


    // webjars
    compile("org.webjars:jquery:2.1.4")
    compile("org.webjars:bootstrap:3.3.5")
}


eclipse {
    classpath {
         containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
         containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}

// TODO: enable and fix all issues
//apply plugin: 'findbugs'
//
//tasks.withType(FindBugs) {
//    reports {
//        xml.enabled = false
//        html.enabled = true
//    }
//}

task wrapper(type: Wrapper) {
    gradleVersion = '2.7'
}

// documented: https://github.com/stevesaliman/gradle-cobertura-plugin/blob/master/usage.md
cobertura {
    coverageFormats = [ 'html' ]

    // ignore getters and setters. Can I get an AMEN!
    coverageIgnoreTrivial = true

    coverageExcludes = [
            // models serve as annotation buckets
            '.*com.schultzco.webservices.models.*',

            // config classes are more framework validation / integration concerns
            '.*com.schultzco.webservices.config.*'
    ]
}

task prepareCodeDeployBundle(type: Copy) {
    from war
    into './codedeploy/app/'
}

prepareCodeDeployBundle.dependsOn bootRepackage
assemble.dependsOn prepareCodeDeployBundle

applicationDefaultJvmArgs = ["-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005" ]

bootRun {
    // support passing -Dsystem.property=value to bootRun task
    systemProperties = System.properties
}